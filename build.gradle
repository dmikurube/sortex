plugins {
    id "java"
    id "maven-publish"
    id "signing"
    id "checkstyle"
    id("org.jreleaser") version "1.17.0"
}

repositories {
    mavenCentral()
}

group = "dev.jigue"
version = "0.1.1-SNAPSHOT"
description "A Java Exception sorter"

configurations {
    compileClasspath.resolutionStrategy.activateDependencyLocking()
    runtimeClasspath.resolutionStrategy.activateDependencyLocking()
}

tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:deprecation" << "-Xlint:unchecked"
    options.encoding = "UTF-8"
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(8)
    }

    withJavadocJar()
    withSourcesJar()
}

dependencies {
    testImplementation "org.junit.jupiter:junit-jupiter-api:5.8.2"
    testImplementation "org.yaml:snakeyaml:1.30"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.8.2"
}

javadoc {
    title = "${project.name} v${project.version}"
    options {
        locale = "en_US"
        encoding = "UTF-8"
        links "https://docs.oracle.com/javase/8/docs/api/"
    }
}

jar {
    metaInf {
        from rootProject.file("LICENSE")
    }
}

sourcesJar {
    metaInf {
        from rootProject.file("LICENSE")
    }
}

javadocJar {
    metaInf {
        from rootProject.file("LICENSE")
    }
}

task checkDependencies {
    notCompatibleWithConfigurationCache("The task \"checkDependencies\" filters configurations at execution time.")
    doLast {
        configurations.findAll { it.canBeResolved }.each { it.resolve() }
    }
}

tasks.withType(GenerateModuleMetadata) {
    enabled = false
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId = project.group
            artifactId = project.name

            from components.java
            // javadocJar and sourcesJar are added by java.withJavadocJar() and java.withSourcesJar() above.
            // See: https://docs.gradle.org/current/javadoc/org/gradle/api/plugins/JavaPluginExtension.html

            pom {  // https://central.sonatype.org/pages/requirements.html
                packaging "jar"

                name = project.name
                description = project.description
                url = "https://github.com/dmikurube/sortex"

                licenses {
                    license {
                        // http://central.sonatype.org/pages/requirements.html#license-information
                        name = "The Apache License, Version 2.0"
                        url = "https://www.apache.org/licenses/LICENSE-2.0.txt"
                        distribution = "repo"
                    }
                }

                developers {
                    developer {
                        name = "Dai MIKURUBE"
                        email = "dmikurube@acm.org"
                    }
                }

                scm {
                    connection = "scm:git:git://github.com/dmikurube/sortex.git"
                    developerConnection = "scm:git:git@github.com:dmikurube/sortex.git"
                    url = "https://github.com/dmikurube/sortex"
                }
            }
        }
    }

    repositories {
        maven {  // https://jreleaser.org/guide/latest/examples/maven/staging-artifacts.html#_gradle
            url = layout.buildDirectory.dir("jreleaser-staging-deploy")
        }
    }
}

signing {
    if (project.hasProperty("signingKey") && project.hasProperty("signingPassword")) {
        logger.lifecycle("Signing with an in-memory key.")
        useInMemoryPgpKeys(signingKey, signingPassword)
    }
    // Disabled: Signed directly by JReleaser when being released by JReleaser.
    // sign publishing.publications.maven
}

jreleaser {
    release {
        github {
            enabled = true  // Not intended, but needed: https://github.com/jreleaser/jreleaser/discussions/1725
            token = "unavailable"
            skipTag = true
            skipRelease = true
        }
    }

    signing {  // https://jreleaser.org/guide/latest/reference/signing.html
        active = org.jreleaser.model.Active.ALWAYS
        armored = true
        mode = org.jreleaser.model.Signing.Mode.MEMORY
        // publicKey is retrieved from the environment variable JRELEASER_GPG_PUBLIC_KEY
        // secretKey is retrieved from the environment variable JRELEASER_GPG_SECRET_KEY
        // passphrase is retrieved from the environment variable JRELEASER_GPG_PASSPHRASE
    }

    deploy {
        maven {
            mavenCentral {  // https://jreleaser.org/guide/latest/reference/deploy/maven/maven-central.html
                sonatype {
                    active = org.jreleaser.model.Active.ALWAYS
                    url = "https://central.sonatype.com/api/v1/publisher"
                    snapshotSupported = false
                    username = System.getenv("JRELEASER_MAVENCENTRAL_USERNAME")
                    password = System.getenv("JRELEASER_MAVENCENTRAL_PASSWORD")
                    authorization = "BEARER"
                    applyMavenCentralRules = true
                    stagingRepository("$buildDir/jreleaser-staging-deploy")
                    retryDelay = 60
                    maxRetries = 60
                }
            }
        }
    }
}

test {
    useJUnitPlatform()
    testLogging {
        outputs.upToDateWhen { false }
        exceptionFormat = org.gradle.api.tasks.testing.logging.TestExceptionFormat.FULL
        showCauses = true
        showExceptions = true
        showStackTraces = true
        showStandardStreams = true
        events "passed", "skipped", "failed", "standardOut", "standardError"
    }
}

checkstyle {
    toolVersion "9.2.1"
    configFile = file("${rootProject.projectDir}/config/checkstyle/checkstyle.xml")
    configProperties = [
        "checkstyle.config.path": file("${projectDir}/config/checkstyle")
    ]
    ignoreFailures = false
    maxWarnings = 0
}
